// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String?

  roles RoleItem[] 

  refreshToken RefreshToken[]
  posts Blog[]
  orders Order[]
  affiliate Affiliate?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleItem {
  user User @relation(fields: [userEmail], references: [email])
  userEmail String

  role Role @relation(fields: [roleName], references: [name])
  roleName String

  @@id([userEmail, roleName])
}

model Role {
  id String @id @default(uuid())
  
  name String @unique
  description String

  users RoleItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id String @id @default(uuid()) 
  token String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  user   User @relation(fields: [userId], references: [id])
}

model Product {
  id String @id @default(uuid())

  slug String @unique

  name String
  description String
  price Float
  image String
  category String
  rank String @default("Fresh Unranked")

  uniqueIdentifier String @unique
  region Region @default(EUW)

  AvgCostOfAccount Float @default(1.00)

  Accounts Account[]
  Orders Order[]

  Item Collection? @relation(fields: [ItemSlug], references: [slug])
  ItemSlug String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id String @id @default(uuid())

  slug String @unique
  name String @unique
  description String

  Products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id String @id @default(uuid())

  licenseUsername String @unique
  license License @relation(fields: [licenseUsername], references: [username], onDelete: Cascade)

  Skins SkinItem[]
  be Int

  status AccountStatus @default(AVAILABLE)

  ProductSlug String
  Product Product @relation(fields: [ProductSlug], references: [slug], onUpdate: Cascade)

  OrderId String?
  Order Order? @relation(fields: [OrderId], references: [id])

  SupplierId String
  Supplier Supplier @relation(fields: [SupplierId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Champion {
  id String @id @default(uuid())

  Skins Skin[]

  name String @unique
  identifier String @unique
  image String
}

model SkinItem {
  id String @id @default(uuid())

  skinName String
  skin Skin @relation(fields: [skinName], references: [name], onUpdate: Cascade)

  accountId String
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Skin {
  id String @id @default(uuid())

  SkinItem SkinItem[]

  name String @unique
  identifier String @unique
  image String
  rarity String
  key String
  champion Champion @relation(fields: [key], references: [name])

  order Order[]
}

model License {
  id String @id @default(uuid())

  Account Account?

  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())

  user User @relation(fields: [billingEmail], references: [email])
  billingEmail String @default("even1spelen@gmail.com")

  productId String?
  product Product? @relation(fields: [productId], references: [slug], onDelete: SetNull)

  skinName String?
  skin Skin? @relation(fields: [skinName], references: [name], onDelete: SetNull, onUpdate: Cascade)

  accounts Account[]

  affiliateId String?
  affiliate Affiliate? @relation(fields: [affiliateId], references: [id], onDelete: SetNull)

  total Float
  quantity Int

  status OrderStatus @default(CREATED)

  couponCode String?
  coupon Coupon? @relation(fields: [couponCode], references: [code], onDelete: SetNull)

  paymentSessionId String? @unique
  paymentSession PaymentSession? @relation(fields: [paymentSessionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentSession {
  id String @id @default(uuid())

  sessionId String @unique
  paymentMethod PaymentMethod @default(STRIPE)
  order Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id String @id @default(uuid())

  name String @unique
  source String

  Accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Blog {
  id String @id @default(uuid())

  title String
  slug String @unique
  content String
  image String?

  category BlogCategory @default(NEWS)
  status BlogStatus @default(DRAFT)
  
  authorId String
  author User @relation(fields: [authorId], references: [id])
  
  metaId String @unique
  meta Meta @relation(fields: [metaId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meta {
  id String @id @default(uuid()) 
  title String @unique
  description String
  image String
  tags String[]
  blog Blog?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id String @id @default(uuid())

  code String @unique
  discount Float
  maxUses Int
  uses Int @default(0)
  expiresAt DateTime

  Order Order[]

  affiliateId String? @unique
  affiliate Affiliate? @relation(fields: [affiliateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Affiliate {
  id String @id @default(uuid())

  name String @unique

  balance Float @default(0.00)
  totalEarnings Float @default(0.00)
  percent Float @default(0.00)

  coupon Coupon?
  order Order[]
  withdrawal Withdrawal[]

  user User @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Withdrawal {
  id String @id @default(uuid())

  amount Float
  status WithdrawalStatus @default(PENDING)

  affiliateId String
  affiliate Affiliate @relation(fields: [affiliateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BlogCategory {
  NEWS
  GAMING
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Region {
  EUW
  EUNE
  NA
  OCE
  TR
  RU
  LAN
  LAS
  BR
}

enum AccountStatus {
  AVAILABLE
  BANNED
  WRONG
  PENDING
  REFUND
  GIVEAWAY
  SOLD
}

enum OrderStatus {
  CREATED
  PENDING
  PAID
  REFUND
  CANCELLED
}

enum PaymentMethod {
  STRIPE
}